{"version":3,"sources":["components/Error.js","components/Pregunta.js","components/Formulario.js","components/Gasto.js","components/ListadoGastos.js","helper.js","components/ControlPresupuesto.js","App.js","serviceWorker.js","index.js"],"names":["Error","msg","className","Pregunta","setPresupuesto","setRestante","setMostrarPregunta","useState","cantidad","setCantidad","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","agregarGasto","restante","nombreGasto","setNombreGasto","cantidadGasto","setCantidadGasto","trim","gasto","id","shortid","generate","Gasto","ListadoGastos","gastos","map","g","key","revisarPresupuesto","presupuesto","ControlPresupuesto","App","mostrarPregunta","setGastos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7ac23ac5.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Error = ({msg}) => {\r\n    return ( \r\n        <p className=\"alert alert-danger error\">\r\n            {msg}\r\n        </p>\r\n     );\r\n}\r\n\r\nError.propTypes = {\r\n    msg: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React, { Fragment, useState} from 'react';\r\nimport Error from './Error'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Pregunta = ({setPresupuesto,setRestante,setMostrarPregunta}) => {\r\n\r\n    const [cantidad,setCantidad] = useState(0);\r\n    const [error,setError] = useState(false);\r\n    \r\n    const definirPresupuesto = e => {\r\n        e.preventDefault(); //Que no env√≠e el GET\r\n        //Validar\r\n        if(cantidad < 1 | isNaN(cantidad)) {\r\n            setError(true);\r\n            return;\r\n        }\r\n        //Si pasa la validacion\r\n        setError(false);\r\n        setPresupuesto(cantidad)\r\n        setRestante(cantidad)\r\n        setMostrarPregunta(false)\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Coloca tu presupuesto</h2>\r\n            \r\n            { error ? <Error msg=\"El presupuesto no es valido\" />: null}\r\n\r\n            <form\r\n                onSubmit={definirPresupuesto}\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Presupuesto\"\r\n                    onChange={ e => setCantidad(parseInt(e.target.value))}\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"button-primary u-full-width\"\r\n                    value=\"Definir presupuesto\"\r\n                />\r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nPregunta.propTypes = {\r\n    setPresupuesto: PropTypes.func.isRequired,\r\n    setRestante: PropTypes.func.isRequired,\r\n    setMostrarPregunta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Pregunta;","import React, {useState} from 'react';\r\nimport Error from './Error';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ({agregarGasto,restante,setRestante}) => {\r\n\r\n    const [nombreGasto,setNombreGasto] = useState('');\r\n    const [cantidadGasto,setCantidadGasto] = useState(0);\r\n    const [error,setError] = useState(false);\r\n\r\n    const actualizarPresupuesto = (e) => {\r\n        e.preventDefault();\r\n        //Validar\r\n        if(nombreGasto.trim() === '' || cantidadGasto <= 1 || isNaN(cantidadGasto)){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        //Constuimos el gasto\r\n        const gasto = {\r\n            nombreGasto,\r\n            cantidadGasto,\r\n            id: shortid.generate()\r\n        }\r\n        agregarGasto(gasto);\r\n        //Actualizo el restante\r\n        setRestante(restante-gasto.cantidadGasto)\r\n        //Reiniciar Form\r\n        setNombreGasto('');\r\n        setCantidadGasto(0);\r\n\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={actualizarPresupuesto}\r\n        >\r\n            <h2>Agregar gastos</h2>\r\n\r\n            <div className=\"campo\">\r\n                <label>Nombre del gasto</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. Transporte\"\r\n                    value={nombreGasto}\r\n                    onChange = { e => setNombreGasto(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"campo\">\r\n                <label>Cantidad del gasto</label>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. 100\"\r\n                    value = {cantidadGasto}\r\n                    onChange = { e => setCantidadGasto(parseInt(e.target.value,10))}\r\n                />\r\n            </div>\r\n\r\n            <input\r\n                className=\"button button-primary u-full-width\"\r\n                type=\"submit\"\r\n            />\r\n\r\n            { error ? <Error msg=\"El gasto no es valido\" />: null}\r\n\r\n        </form>\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    agregarGasto: PropTypes.func.isRequired,\r\n    restante: PropTypes.number.isRequired,\r\n    setRestante: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Gasto = ({gasto}) => (\r\n    <li className=\"gastos\">\r\n        <p>\r\n            {gasto.nombreGasto}\r\n            <span className=\"gasto\">$ {gasto.cantidadGasto}</span>\r\n        </p>\r\n    </li>\r\n)\r\n \r\nexport default Gasto;","import React from 'react';\r\nimport Gasto from './Gasto'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ListadoGastos = ({gastos}) => {\r\n    return ( \r\n        <div className=\"gastos-realizados\">\r\n            <h2>Listado</h2>\r\n            {gastos.map(g => (\r\n                <Gasto\r\n                    key={g.id}\r\n                    gasto={g}\r\n                />\r\n            ))}\r\n        </div>\r\n     );\r\n\r\n}\r\n\r\nListadoGastos.propTypes = {\r\n    gastos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ListadoGastos;","export const revisarPresupuesto = (presupuesto,restante) => {\r\n    let clase;\r\n\r\n    if((presupuesto/4) > restante){\r\n        clase = 'alert alert-danger'\r\n    }else if((presupuesto/2) > restante){\r\n        clase = 'alert alert-warning'\r\n    }else{\r\n        clase = 'alert alert-success'\r\n    }\r\n    return clase;\r\n}","import React, {Fragment} from 'react';\r\nimport {revisarPresupuesto} from '../helper'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ControlPresupuesto = ({presupuesto,restante}) => {\r\n    return ( \r\n        <Fragment>\r\n            <div className=\"alert alert-primary\">\r\n                Presupuesto: $ {presupuesto}\r\n            </div>\r\n            <div className={revisarPresupuesto(presupuesto,restante)}>\r\n                Restante: $ {restante}\r\n            </div>\r\n        </Fragment>\r\n     );\r\n}\r\n\r\nControlPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.number.isRequired,\r\n    restante: PropTypes.number.isRequired\r\n}\r\n \r\nexport default ControlPresupuesto;","import React, {useState} from 'react';\nimport Pregunta from './components/Pregunta'\nimport Formulario from './components/Formulario'\nimport ListadoGastos from './components/ListadoGastos';\nimport ControlPresupuesto from './components/ControlPresupuesto';\n\nfunction App() {\n\n  const [presupuesto,setPresupuesto] = useState(0);\n  const [restante,setRestante] = useState(0);\n  const [mostrarPregunta,setMostrarPregunta] = useState(true);\n  const [gastos, setGastos] = useState([]);\n\n\n  const agregarGasto = (g) => {\n    setGastos([\n      ...gastos,\n      g\n    ])\n  }\n\n  return (\n    <div className=\"container\">\n        <header>\n          <h1>Gasto semanal</h1>\n          <div className=\"contenido-principal contenido\">\n\n            { mostrarPregunta \n              ?\n              (\n              <Pregunta \n                setPresupuesto={setPresupuesto}\n                setRestante={setRestante}\n                setMostrarPregunta={setMostrarPregunta}\n              />\n              )\n              :\n              (\n                <div className=\"row\">\n\n                  <div className=\"one-half column\">\n                    <Formulario\n                      agregarGasto={agregarGasto}\n                      restante={restante}\n                      setRestante={setRestante}\n                    />\n                  </div>\n\n                  <div className=\"one-half column\">\n\n                    <ListadoGastos\n                        gastos={gastos}\n                    />\n\n                    <ControlPresupuesto\n                        presupuesto={presupuesto}\n                        restante={restante}\n                    />\n\n                  </div>\n\n                </div>\n              )\n            }\n\n\n          </div>\n        </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}